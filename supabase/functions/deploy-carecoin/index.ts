import { ethers } from "https://esm.sh/ethers@6.7.1";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

// CareCoin Smart Contract Source Code
const CARECOIN_CONTRACT_SOURCE = `
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract CareCoin {
    string public name = "CareCoin";
    string public symbol = "CARE";
    uint8 public decimals = 18;
    uint256 public totalSupply = 1000000 * 10**18; // 1 million tokens
    
    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;
    mapping(address => uint256) public stakedAmount;
    mapping(address => uint256) public stakeTimestamp;
    
    address public owner;
    uint256 public constant STAKE_REWARD_RATE = 5; // 5% APY
    
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event Staked(address indexed user, uint256 amount);
    event Unstaked(address indexed user, uint256 amount);
    event Minted(address indexed to, uint256 amount, string metadataHash);
    
    constructor() {
        owner = msg.sender;
        balanceOf[msg.sender] = totalSupply;
        emit Transfer(address(0), msg.sender, totalSupply);
    }
    
    modifier onlyOwner() {
        require(msg.sender == owner, "Not the owner");
        _;
    }
    
    function transfer(address to, uint256 value) public returns (bool) {
        require(balanceOf[msg.sender] >= value, "Insufficient balance");
        balanceOf[msg.sender] -= value;
        balanceOf[to] += value;
        emit Transfer(msg.sender, to, value);
        return true;
    }
    
    function approve(address spender, uint256 value) public returns (bool) {
        allowance[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }
    
    function transferFrom(address from, address to, uint256 value) public returns (bool) {
        require(balanceOf[from] >= value, "Insufficient balance");
        require(allowance[from][msg.sender] >= value, "Insufficient allowance");
        balanceOf[from] -= value;
        balanceOf[to] += value;
        allowance[from][msg.sender] -= value;
        emit Transfer(from, to, value);
        return true;
    }
    
    function stake(uint256 amount) public {
        require(balanceOf[msg.sender] >= amount, "Insufficient balance");
        require(amount > 0, "Amount must be positive");
        
        // Claim any existing rewards first
        if (stakedAmount[msg.sender] > 0) {
            claimStakeRewards();
        }
        
        balanceOf[msg.sender] -= amount;
        stakedAmount[msg.sender] += amount;
        stakeTimestamp[msg.sender] = block.timestamp;
        
        emit Staked(msg.sender, amount);
    }
    
    function unstake(uint256 amount) public {
        require(stakedAmount[msg.sender] >= amount, "Insufficient staked amount");
        
        // Claim rewards first
        claimStakeRewards();
        
        stakedAmount[msg.sender] -= amount;
        balanceOf[msg.sender] += amount;
        
        emit Unstaked(msg.sender, amount);
    }
    
    function claimStakeRewards() public {
        uint256 staked = stakedAmount[msg.sender];
        if (staked == 0) return;
        
        uint256 timeStaked = block.timestamp - stakeTimestamp[msg.sender];
        uint256 reward = (staked * STAKE_REWARD_RATE * timeStaked) / (365 days * 100);
        
        if (reward > 0) {
            balanceOf[msg.sender] += reward;
            totalSupply += reward;
            stakeTimestamp[msg.sender] = block.timestamp;
            emit Transfer(address(0), msg.sender, reward);
        }
    }
    
    function mint(address to, uint256 amount, string memory metadataHash) public onlyOwner {
        balanceOf[to] += amount;
        totalSupply += amount;
        emit Transfer(address(0), to, amount);
        emit Minted(to, amount, metadataHash);
    }
    
    function getStakeRewards(address user) public view returns (uint256) {
        uint256 staked = stakedAmount[user];
        if (staked == 0) return 0;
        
        uint256 timeStaked = block.timestamp - stakeTimestamp[user];
        return (staked * STAKE_REWARD_RATE * timeStaked) / (365 days * 100);
    }
}
`;

// Compiled bytecode for the CareCoin contract
const CARECOIN_BYTECODE = "";

Deno.serve(async (req) => {
  console.log('Deploy CareCoin function called');

  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const alchemyApiKey = Deno.env.get('ALCHEMY_API_KEY');
    const deployerPrivateKey = Deno.env.get('DEPLOYER_PRIVATE_KEY');

    if (!alchemyApiKey || !deployerPrivateKey) {
      throw new Error('Missing required environment variables: ALCHEMY_API_KEY or DEPLOYER_PRIVATE_KEY');
    }

    // Connect to Sepolia network via Alchemy
    const provider = new ethers.JsonRpcProvider(`https://eth-sepolia.g.alchemy.com/v2/${alchemyApiKey}`);
    const wallet = new ethers.Wallet(deployerPrivateKey, provider);

    console.log('Deploying CareCoin contract...');
    console.log('Deployer address:', wallet.address);

    // Contract factory with bytecode and ABI
    const contractABI = [
      "constructor()",
      "function name() view returns (string)",
      "function symbol() view returns (string)",
      "function decimals() view returns (uint8)",
      "function totalSupply() view returns (uint256)",
      "function balanceOf(address owner) view returns (uint256)",
      "function transfer(address to, uint256 amount) returns (bool)",
      "function approve(address spender, uint256 amount) returns (bool)",
      "function transferFrom(address from, address to, uint256 amount) returns (bool)",
      "function allowance(address owner, address spender) view returns (uint256)",
      "function stake(uint256 amount) public",
      "function unstake(uint256 amount) public",
      "function claimStakeRewards() public",
      "function mint(address to, uint256 amount, string metadataHash) public",
      "function getStakeRewards(address user) view returns (uint256)",
      "function stakedAmount(address) view returns (uint256)",
      "function stakeTimestamp(address) view returns (uint256)",
      "function owner() view returns (address)",
      "event Transfer(address indexed from, address indexed to, uint256 value)",
      "event Approval(address indexed owner, address indexed spender, uint256 value)",
      "event Staked(address indexed user, uint256 amount)",
      "event Unstaked(address indexed user, uint256 amount)",
      "event Minted(address indexed to, uint256 amount, string metadataHash)"
    ];

    const contractFactory = new ethers.ContractFactory(contractABI, CARECOIN_BYTECODE, wallet);

    // Deploy the contract
    const contract = await contractFactory.deploy();
    await contract.waitForDeployment();

    const contractAddress = await contract.getAddress();
    const deploymentTx = contract.deploymentTransaction();

    console.log('CareCoin deployed successfully!');
    console.log('Contract address:', contractAddress);
    console.log('Transaction hash:', deploymentTx?.hash);

    // Verify deployment by calling contract methods
    const name = await contract.name();
    const symbol = await contract.symbol();
    const totalSupply = await contract.totalSupply();
    const decimals = await contract.decimals();

    const response = {
      success: true,
      contractAddress,
      transactionHash: deploymentTx?.hash,
      network: 'sepolia',
      contractDetails: {
        name,
        symbol,
        decimals: Number(decimals),
        totalSupply: ethers.formatEther(totalSupply),
        owner: wallet.address
      },
      message: `CareCoin deployed successfully on Sepolia network!`
    };

    console.log('Deployment response:', response);

    return new Response(JSON.stringify(response), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });

  } catch (error) {
    console.error('Deployment error:', error);
    
    return new Response(JSON.stringify({
      success: false,
      error: error.message || 'Failed to deploy CareCoin contract',
      details: error
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });
  }
});